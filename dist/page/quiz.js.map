{
  "version": 3,
  "sources": ["../../src/page/quiz.ts"],
  "sourcesContent": ["\n/*\n * Page | Quiz\n */\n\nimport { IRouteHandler } from \"@sygnal/sse\";\n\n\n\nexport class QuizPage implements IRouteHandler {\n\n  constructor() {\n  }\n\n  setup() {\n        \n  }\n\n  exec() {\n\n    this.fetchIPInfo();\n    this.setupEventListeners();  \n    \n    // const ipinfoWrapper = new IPinfoWrapper(\"37cce46c605631\"); // Sygnal's HACK\n\n    // ipinfoWrapper.lookupIp(\"1.1.1.1\").then((response: IPinfo) => {\n    //     console.log(response);\n    // });\n  \n  }\n\n  async fetchIPInfo() {\n    const url = `https://ipinfo.io?token=37cce46c605631`;\n\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n\n      this.applyIPInfoData(data);\n\n    } catch (error) {\n        console.error('Failed to fetch IP info:', error);\n    }\n}\n\n\napplyIPInfoData(data: any) {\n  // Find all elements with the 'ip-info' attribute\n  const elements = document.querySelectorAll('[ip-info]');\n\n  // Iterate over each element\n  elements.forEach((element: Element) => {\n      // Get the property name from the 'ip-info' attribute\n      const propertyName = element.getAttribute('ip-info');\n      \n      // Check if the property exists in the data object\n      if (propertyName && data.hasOwnProperty(propertyName)) {\n          // Set the inner text of the element to the value of the corresponding property in the data object\n          element.textContent = data[propertyName];\n      } else {\n          console.log(`Property '${propertyName}' not found in data`);\n      }\n  });\n}\n\n\nprivate setupEventListeners(): void {\n  // Get all radio input elements\n  const radios: NodeListOf<HTMLInputElement> = document.querySelectorAll('input[type=\"radio\"]');\n  \n  // Add an event listener to each radio button\n  radios.forEach(radio => {\n      radio.addEventListener('change', () => this.calculateTotalScore());\n  });\n}\n\nprivate calculateTotalScore(): void {\n  // Get all checked radio input elements\n  const checkedRadios: NodeListOf<HTMLInputElement> = document.querySelectorAll('input[type=\"radio\"]:checked');\n  let totalScore: number = 0;\n  console.log(\"clicked\");\n\n  // Sum the values of the checked radio inputs\n  checkedRadios.forEach(radio => {\n      // Ensure the value is a number before adding it to totalScore\n      totalScore += Number(radio.value);\n  });\n\n  // Display the total score - Update or modify based on where you want to display\n  const scoreDisplay: HTMLElement | null = document.getElementById('scoreDisplay');\n  if (scoreDisplay) {\n      scoreDisplay.textContent = `Total Score: ${totalScore}`;\n  }\n}\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AASO,MAAM,WAAN,MAAwC;AAAA,IAE7C,cAAc;AAAA,IACd;AAAA,IAEA,QAAQ;AAAA,IAER;AAAA,IAEA,OAAO;AAEL,WAAK,YAAY;AACjB,WAAK,oBAAoB;AAAA,IAQ3B;AAAA,IAEM,cAAc;AAAA;AAClB,cAAM,MAAM;AAEZ,YAAI;AACA,gBAAM,WAAW,MAAM,MAAM,GAAG;AAChC,gBAAM,OAAO,MAAM,SAAS,KAAK;AACjC,kBAAQ,IAAI,IAAI;AAElB,eAAK,gBAAgB,IAAI;AAAA,QAE3B,SAAS,OAAP;AACE,kBAAQ,MAAM,4BAA4B,KAAK;AAAA,QACnD;AAAA,MACJ;AAAA;AAAA,IAGA,gBAAgB,MAAW;AAEzB,YAAM,WAAW,SAAS,iBAAiB,WAAW;AAGtD,eAAS,QAAQ,CAAC,YAAqB;AAEnC,cAAM,eAAe,QAAQ,aAAa,SAAS;AAGnD,YAAI,gBAAgB,KAAK,eAAe,YAAY,GAAG;AAEnD,kBAAQ,cAAc,KAAK;AAAA,QAC/B,OAAO;AACH,kBAAQ,IAAI,aAAa,iCAAiC;AAAA,QAC9D;AAAA,MACJ,CAAC;AAAA,IACH;AAAA,IAGQ,sBAA4B;AAElC,YAAM,SAAuC,SAAS,iBAAiB,qBAAqB;AAG5F,aAAO,QAAQ,WAAS;AACpB,cAAM,iBAAiB,UAAU,MAAM,KAAK,oBAAoB,CAAC;AAAA,MACrE,CAAC;AAAA,IACH;AAAA,IAEQ,sBAA4B;AAElC,YAAM,gBAA8C,SAAS,iBAAiB,6BAA6B;AAC3G,UAAI,aAAqB;AACzB,cAAQ,IAAI,SAAS;AAGrB,oBAAc,QAAQ,WAAS;AAE3B,sBAAc,OAAO,MAAM,KAAK;AAAA,MACpC,CAAC;AAGD,YAAM,eAAmC,SAAS,eAAe,cAAc;AAC/E,UAAI,cAAc;AACd,qBAAa,cAAc,gBAAgB;AAAA,MAC/C;AAAA,IACF;AAAA,EAEA;",
  "names": []
}
